# -*- coding: utf-8 -*-
"""Copy of TicTacToe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdW1VNfxfkJBcohqhUFvT9LFdF6cwpLi

# Tic Tac Toe Game 
##### Scratch Building
##### No GUI Required

#### Some suggested tools before you get started:
To take input from a user:

    player1 = input("Please pick a marker 'X' or 'O'")
    
Note that input() takes in a string. If you need an integer value, use

    position = int(input('Please enter a number'))
    
<br>To clear the screen between moves:

    from IPython.display import clear_output
    clear_output()
    
Note that clear_output() will only work in jupyter. To clear the screen in other IDEs, consider:

    print('\n'*100)
    
This scrolls the previous board up out of view. Now on to the program!

**Step 1: Write a function that can print out a board. Set up your board as a list, where each index 1-9 corresponds with a number on a number pad, so you get a 3 by 3 board representation.**
"""

from IPython.display import clear_output

def display_board(board):
    print (board[0],'l',board[1],'l',board[2])
    print('------------')
    print (board[3],'l',board[4],'l',board[5])
    print('------------')
    print (board[6],'l',board[7],'l',board[8])
    print('------------')

"""**TEST Step 1:** run your function on a test version of the board list, and make adjustments as necessary"""

test_board = ['X','O','X','O','X','O','X','O','X']
display_board(test_board)

"""**Step 2: Write a function that can take in a player input and assign their marker as 'X' or 'O'. Think about using *while* loops to continually ask until you get a correct answer.**"""

def player_input():
    
    player1 = input("Please pick a marker 'X' or 'O'")
    while(player1 !='X' and player1 !='Y'):
          player1 = input("Please pick a marker 'X' or 'O'")
    return player1

"""**TEST Step 2:** run the function to make sure it returns the desired output"""

player_input()

"""**Step 3: Write a function that takes in the board list object, a marker ('X' or 'O'), and a desired position (number 1-9) and assigns it to the board.**"""

def place_marker(board, marker, position):
  if marker=='X' or marker=='Y':
   board[position]=marker
  else:
    print('enter a valid marker')

"""**TEST Step 3:** run the place marker function using test parameters and display the modified board"""

place_marker(test_board,'$',8)
display_board(test_board)

"""**Step 4: Write a function that takes in a board and a mark (X or O) and then checks to see if that mark has won. **"""

def win_check(board, mark):
   
   if ((board[0]==board[1]==board[2]==mark) or(board[3]==board[4]==board[5]==mark) or (board[6]==board[7]==board[8]==mark)):
     return True
   elif ((board[0]==board[3]==board[6]==mark) or(board[1]==board[4]==board[7]==mark) or (board[2]==board[5]==board[8]==mark)):
     return True
   elif ((board[0]==board[4]==board[8]==mark) or(board[2]==board[4]==board[6]==mark)):
     return True
   else:
     return False

"""**TEST Step 4:** run the win_check function against our test_board - it should return True"""

win_check(test_board,'X')

"""**Step 5: Write a function that uses the random module to randomly decide which player goes first. You may want to lookup random.randint() Return a string of which player went first.**"""

from  random import randint

def choose_first():
    return randint('X','O')

"""**Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.**"""

def space_check(board, position):
    
    if board[position] !='X' and board[position]!='O':
      return True
    else:
      return False

"""**Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.**"""

def full_board_check(board):
    
   for i in board:
     if i!='X' and i!='O':
       return False
   return True

"""**Step 8: Write a function that asks for a player's next position (as a number 1-9) and then uses the function from step 6 to check if it's a free position. If it is, then return the position for later use.**"""

def player_choice(board): 
  x=input('enter your next position')
  if space_check(board,x):
     return True

"""**Step 9: Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.**"""

def replay():
    
    x=input('do you want to play again Y for yes')
    if x=='y' or x=='Y':
      return True
    else :
      return False

"""**Step 10: Here comes the hard part! Use while loops and the functions you've made to run the game!**"""

print('Welcome to Tic Tac Toe!')
from IPython.display import clear_output
from  random import randint

def choose_first(player1,player2):
     x=randint(1,3)
     if x==1:
       return player1
     else:
       return player2


def display_board(board):
    print (board[0],'l',board[1],'l',board[2])
    print('------------')
    print (board[3],'l',board[4],'l',board[5])
    print('------------')
    print (board[6],'l',board[7],'l',board[8])
    print('------------')
board= ['_','_','_','_','_','_','_','_','_']
def player_input():
    player = input("Please pick a marker 'X' or 'O'")
    while(player !='X' and player !='O'and player !='x'and player !='o'):
         player = input("Please pick a marker 'X' or 'O'")
    return player
def place_marker(board, marker, position):
   
         board[position]=marker
   

def replay():
    
    x=input('do you want to play again Y for yes')
    if x=='y' or x=='Y':
         return True
    else :
         return False
def full_board_check(board):
    
    for i in board:
         if i!='X' and i!='O':
            return False
    return True
def space_check(board, position):
    
    if position>=0 and position<=9 and board[position] !='X' and board[position]!='O' :
         return True
    else:
         return False
def win_check(board, mark):
   
   if ((board[0]==board[1]==board[2]==mark) or(board[3]==board[4]==board[5]==mark) or (board[6]==board[7]==board[8]==mark)):
     return True
   elif ((board[0]==board[3]==board[6]==mark) or(board[1]==board[4]==board[7]==mark) or (board[2]==board[5]==board[8]==mark)):
     return True
   elif ((board[0]==board[4]==board[8]==mark) or(board[2]==board[4]==board[6]==mark)):
     return True
   else:
         return False
while True:
    # Reset the board
   clear_output()
   display_board(board)
    
    # Choose Markers
   player1=player_input()
   if player1=='X' or player1=='x':
        player2='O'
   else:
        player2='X'

    # Who Starts First 
   turn = choose_first('Player 1','Player 2')
   print(turn + ' will go first.')
    
    # Asking to Start or  End The Game
  #  if replay():
  #      print("let's start the game")
  #  else:
  #      break


   while (full_board_check(board)==False):
        if turn == 'Player 1':
            # Player1's turn.

            # Display Board 
            display_board(board)
            # Take His Action
            position=int(input('enter the next position'))
            while(space_check(board, position)==False):
              position=int(input('not empty try another position'))
            place_marker(board, player1, position)



            # Did he Win
            if  win_check(board, player1):
                display_board(board)
                print('Congratulations! player1 has won the game!')
                break

            else:
                if (full_board_check(board)) :
                    display_board(board)
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 2'

        else:
            # Player2's turn.
            # Display Board 
            display_board(board)
            # Take His Action
            position=int(input('enter the next position'))
            while(space_check(board, position)==False):
              position=int(input('not empty try another position'))
            place_marker(board, player2, position)


            # Did he Win
            

            if  win_check(board, player2):
                display_board(board)
                print('Congratulations! player2 has won the game!')
                break
   
            else:
                if (full_board_check(board)) :
                    display_board(board)
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 1'
    # Replay ?
   if replay()==False:
            break
   else:
     board= ['_','_','_','_','_','_','_','_','_']

"""## Good Job!"""